/* -*- c++ -*- */
/*
 * Copyright 2004,2010 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <chaos_dcsk_demod_cb.h>
#include <gr_io_signature.h>
//#include <stdio.h>
#include <iostream>
//#include <cmath>
#include <math.h>
#include <complex>
using namespace std;

/*
 * Create a new instance of chaos_dcsk_demod_cb and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
chaos_dcsk_demod_cb_sptr
chaos_make_dcsk_demod_cb (int n_samples)
{
  return gnuradio::get_initial_sptr(new chaos_dcsk_demod_cb (n_samples));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.
 */
static const int MIN_IN = 1;        // mininum number of input streams
static const int MAX_IN = 1;        // maximum number of input streams
static const int MIN_OUT = 1;        // minimum number of output streams
static const int MAX_OUT = 1;        // maximum number of output streams

/*
 * The private constructor
 */

chaos_dcsk_demod_cb::chaos_dcsk_demod_cb (int n_samples)
  : gr_block ("dcsk_demod_cb",
              gr_make_io_signature (MIN_IN, MAX_IN, sizeof(gr_complex)),
              gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (unsigned char))),
                        d_n_samples (n_samples)
{
  set_n_samples(n_samples);
}

/*
 * Our virtual destructor.
 */
chaos_dcsk_demod_cb::~chaos_dcsk_demod_cb ()
{
}

void
chaos_dcsk_demod_cb::set_n_samples (int n_samples)
{
  if (n_samples < 1)
    n_samples = 1;

  d_n_samples = n_samples;

  //sets the rate as follow: output/input
  set_relative_rate(1.0 / (double)(2*n_samples));
}

void
chaos_dcsk_demod_cb::forecast (int noutput_items, gr_vector_int &ninput_items_required)
{
  ninput_items_required[0] = noutput_items * 2 * d_n_samples;
}

// Function that verifies if we have enough chaos samples at the input and enough bits available
// at the output to completly demodulate the chaotic signal. The function returns the maximum number
// of bits that can be computed.
unsigned int
chaos_dcsk_demod_cb::verification(unsigned int n_input_signal,int output_bits)
{
  unsigned int input_bits, n_bits;

  input_bits = (unsigned int) n_input_signal / (2 * d_n_samples);

  if (input_bits < (unsigned int) output_bits)
    n_bits = input_bits;
  else
    n_bits = output_bits;

  return (n_bits);
}

// Makes a cross-correlation of the reference and the data.
gr_complex
chaos_dcsk_demod_cb::cross_corr(const gr_complex * chaos_ref, const gr_complex * chaos_data)
{
  int i;
  gr_complex correlation(0, 0);

  for (i = 0; i < d_n_samples; i++)
    correlation += (chaos_ref[i] * conj(chaos_data[i]));

  return (correlation);
}

int
chaos_dcsk_demod_cb::general_work (int noutput_items,
                                   gr_vector_int &ninput_items,
                                   gr_vector_const_void_star &input_items,
                                   gr_vector_void_star &output_items)
{
  const gr_complex *in_signal = (const gr_complex *) input_items[0];
  unsigned int ninput_signal = ninput_items[0];    // total number of chaos samples in the chaotic signal at the input
  unsigned char *out_info = (unsigned char *) output_items[0];  // information output
  int i;
  int nbits_data;
  gr_complex correlation(0, 0);

  nbits_data = verification(ninput_signal, noutput_items);

  // done when all bits are set for the output
  for (i = 0; i < nbits_data; i++) {
    // cross correlation of the reference and the data to obtain the information sent from the source

    correlation = cross_corr(&in_signal[ i * d_n_samples * 2],
                             &in_signal[(i * d_n_samples * 2) + d_n_samples]);

    // signbit returns 0 if the argument is positive
    if (signbit(correlation.real()) == 0)
      out_info[i] = 1;
    else                                                // signbit returns non-zero if the argument is negative
      out_info[i] = 0;
  }

  consume_each(2 * nbits_data * d_n_samples);

  //cout << "consume " << input_consumed << " bits_data " << nbits_data << endl;

  // Tell runtime system how many output items we produced.
  return (nbits_data);
}
