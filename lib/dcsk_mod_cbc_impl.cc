/* -*- c++ -*- */
/*
 * Copyright 2004,2010 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <iostream>
#include <chaos_dcsk_mod_cbc.h>
#include <gr_io_signature.h>

/*
 * Create a new instance of chaos_dcsk_mod_cbc and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
chaos_dcsk_mod_cbc_sptr 
chaos_make_dcsk_mod_cbc (int n_samples)
{
  return gnuradio::get_initial_sptr(new chaos_dcsk_mod_cbc (n_samples));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.
 */
static const int MIN_IN = 2;	// mininum number of input streams
static const int MAX_IN = 2;	// maximum number of input streams
static const int MIN_OUT = 1;	// minimum number of output streams
static const int MAX_OUT = 1;	// maximum number of output streams

/*
 * The private constructor
 */

static int ios[] = {sizeof(gr_complex), sizeof(unsigned char)}; 	// input 0: chaos = gr_complex, input 1: data = unsigned char
static std::vector<int> iosig(ios, ios+sizeof(ios)/sizeof(int)); 	// iosig(start of array, end of array)

chaos_dcsk_mod_cbc::chaos_dcsk_mod_cbc (int n_samples)
  : gr_block ("dcsk_mod_cbc",
	      gr_make_io_signaturev (MIN_IN, MAX_IN, iosig),
	      gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (gr_complex))),
			d_n_samples (n_samples)
{
	set_n_samples(n_samples);
}

/*
 * Our virtual destructor.
 */
chaos_dcsk_mod_cbc::~chaos_dcsk_mod_cbc ()
{
  
}

void
chaos_dcsk_mod_cbc::set_n_samples (int n_samples)
{
	if (n_samples < 1)
	{
   	n_samples = 1;
	}

  d_n_samples = n_samples;

  set_relative_rate((double)(2 * n_samples));	//sets the rate as follow: output/data_input, 
																// since the data_input is the more constraining one
  set_output_multiple (2 * n_samples);				// ensure that the noutput_items argument passed to forecast and 
																// general_work will be an integer multiple of "2*n_samples"
}



void 
chaos_dcsk_mod_cbc::forecast (int noutput_items, gr_vector_int &ninput_items_required)
{
	int output_bits;

	output_bits = (int) (noutput_items/(2*d_n_samples));	
	ninput_items_required[0] = output_bits*d_n_samples;		// chaos input
	ninput_items_required[1] = output_bits;						// data input
}


// Function that verifies if we have enough chaos samples at the input, bits of data and enough bits available
// at the output to completly modulate the chaotic signal. The function returns the maximum number
// of bits that can be computed.
unsigned int chaos_dcsk_mod_cbc::verification(unsigned int n_input_chaos, unsigned int data_bits,int n_output_items)
{
	unsigned int chaos_bits, output_bits, n_bits;

	chaos_bits = (unsigned int) n_input_chaos/d_n_samples;			// possible number of bits for the number of chaos samples available
	output_bits = (unsigned int) n_output_items/(2*d_n_samples);	// possible number of bits for the number of output bits available

	if(chaos_bits < output_bits)
	{
		if(chaos_bits < data_bits)
		{
			n_bits = chaos_bits;	
		}
		else
		{
			n_bits = data_bits;
		}	
	}
	else
	{
		if(output_bits < data_bits)
		{
			n_bits = output_bits;	
		}
		else
		{
			n_bits = data_bits;
		}	
	}
	return n_bits;	
}

int 
chaos_dcsk_mod_cbc::general_work (int noutput_items,
		gr_vector_int &ninput_items,
		gr_vector_const_void_star &input_items,
		gr_vector_void_star &output_items	 
	) 	
{
	//unsigned int nchan = input_items.size ();								// total number of inputs (2:chaos,data)					
	const gr_complex *in_chaos = (const gr_complex *) input_items[0];			// chaos input
	const unsigned char *in_data = (const unsigned char *) input_items[1];	// data input
   unsigned int ninput_chaos = ninput_items[0];								// number of chaos samples available
	unsigned int ninput_data = ninput_items[1];								// number of data bits available
	gr_complex *out_signal = (gr_complex *) output_items[0];				// signal output
 
	int i,j,nbits_data;
	unsigned int chaos_consumed, out_produced;
	
		
	nbits_data = verification(ninput_chaos,ninput_data,noutput_items);

	for(i=0;i<nbits_data;i++)			// done when all bits are set for the output
	{
		for(j=0;j<d_n_samples;j++)			// 1 bit for 2*'x' chaos samples
		{
			out_signal[(2*d_n_samples*i)+j] = in_chaos[(d_n_samples*i)+j];						// the reference
				
			if(in_data[i])							// if data=1, data = reference
			{		
				out_signal[((2*d_n_samples*i)+d_n_samples)+j] = in_chaos[(d_n_samples*i)+j];			// the data
			}
			else										// if data=0, data = -reference
			{
				out_signal[((2*d_n_samples*i)+d_n_samples)+j] = (gr_complex) -1 * (in_chaos[(d_n_samples*i)+j]);	// the data
			}
		}
		j=0;
	}
	i=0;
		
	chaos_consumed = nbits_data*d_n_samples;
	out_produced = nbits_data*(2*d_n_samples);

	consume(0,chaos_consumed);						// number of items consumed (chaos input)
	consume(1,nbits_data);						// number of items consumed (data input)

  //std::cout << "chaos:" << chaos_consumed << " data:" << nbits_data << " out:" << out_produced << std::endl;

  // Tell runtime system how many output items we produced.
  return out_produced;
}
